{"version":3,"sources":["components/EmptyState.jsx","components/SearchField.jsx","components/UserDetails.jsx","components/LoadingState.jsx","services/fetchGithubUser.js","pages/Homepage.jsx","hooks/useDebounce.js","hooks/useGithubUserFetch.js","App.js","serviceWorker.js","index.js"],"names":["mount","search","message","showSearch","className","src","props","type","user","name","blog","login","email","avatar_url","followers","following","alt","href","getConfig","useState","setName","debouncedName","data","delay","savedData","setSavedData","useEffect","timeout","setTimeout","clearTimeout","useDebounce","loading","setLoading","error","setError","setData","didMountRef","useRef","useLayoutEffect","current","a","fetch","process","toString","resp","json","ok","useGithubUserFetch","mounted","SearchField","placeholder","onChange","e","target","value","LoadingState","EmptyState","UserDetails","App","Homepage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.e28473af.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function ({ mount, search, message }) {\r\n  function showSearch() {\r\n    return mount || !search;\r\n  }\r\n\r\n  function parsedMessage() {\r\n    return message === \"Not Found\"\r\n      ? \"When you are ready, go ahead and search for a user\"\r\n      : message;\r\n  }\r\n\r\n  return (\r\n    <div className=\"empty-container\">\r\n      <div className=\"empty__content\">\r\n        <div className=\"empty__img\">\r\n          <img src={`images/${showSearch() ? \"search\" : \"error\"}.svg`} />\r\n        </div>\r\n        <div className=\"empty__title\">No user found</div>\r\n        <div className=\"empty__message\">\r\n          {showSearch() ? parsedMessage() : message}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function (props) {\r\n  return (\r\n    <div className=\"input-container\">\r\n      <input type=\"text\" {...props}></input>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function ({\r\n  user: {\r\n    name,\r\n    blog,\r\n    login,\r\n    email,\r\n    avatar_url,\r\n    followers,\r\n    following,\r\n  },\r\n}) {\r\n  return (\r\n    <div className=\"user-container\">\r\n      <div className=\"user__avatar\">\r\n        <img alt={name} src={avatar_url} />\r\n      </div>\r\n      {name && <div className=\"user__name\">{name}</div>}\r\n      {login && <div className=\"user__handle\">{login}</div>}\r\n      {email && <div className=\"user__email\">{email}</div>}\r\n      {followers || following ? (\r\n        <div className=\"user__follows\">\r\n          {followers && (\r\n            <span>\r\n              <strong>{followers} </strong> Followers\r\n            </span>\r\n          )}\r\n          <span className=\"divider\"> | </span>\r\n          {following && (\r\n            <span>\r\n              <strong>{following} </strong> Following\r\n            </span>\r\n          )}\r\n        </div>\r\n      ) : null}\r\n      {blog && <a className=\"user__blog\" href={blog}>{blog}</a>}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function () {\r\n  return (\r\n    <div className=\"loading-container\">\r\n      <div className=\"loader\" />\r\n    </div>\r\n  );\r\n}\r\n","export const fetchGithubUser = (user) =>\r\n  fetch(\r\n    `${process.env.REACT_APP_API_URL}users/` + user.toString(),\r\n    getConfig()\r\n  );\r\n\r\nconst getConfig = () => {\r\n  return process.env.NODE_ENV === \"development\"\r\n    ? {\r\n        headers: {\r\n          Authorization: `token ${process.env.REACT_APP_API_TOKEN}`,\r\n        },\r\n      }\r\n    : {};\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport {\r\n  EmptyState,\r\n  SearchField,\r\n  UserDetails,\r\n  LoadingState,\r\n} from \"../components/\";\r\nimport { useDebounce, useGithubUserFetch } from \"../hooks/\";\r\n\r\nexport default function () {\r\n  const [name, setName] = useState(\"\");\r\n  const debouncedName = useDebounce(name, 500);\r\n\r\n  const [user, error, loading, mounted] = useGithubUserFetch(debouncedName);\r\n\r\n  function getUserDetails() {\r\n    return (\r\n      <div>\r\n        {error && (\r\n          <EmptyState\r\n            search={debouncedName}\r\n            message=\"To widen your search, change or remove filters\"\r\n          />\r\n        )}\r\n        {user && <UserDetails user={user} />}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"home-container\">\r\n      <div className=\"home-content\">\r\n        <SearchField\r\n          placeholder=\"Search for github users..\"\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n        <hr />\r\n        {mounted ? (\r\n          loading ? (\r\n            <LoadingState />\r\n          ) : (\r\n            getUserDetails()\r\n          )\r\n        ) : (\r\n          <EmptyState mount search={debouncedName} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useEffect, useState } from \"react\";\r\n\r\nexport default function useDebounce(data, delay) {\r\n  const [savedData, setSavedData] = useState(data);\r\n\r\n  useEffect(() => {\r\n    const timeout = setTimeout(() => {\r\n      setSavedData(data);\r\n    }, delay);\r\n    return () => clearTimeout(timeout);\r\n  }, [data]);\r\n\r\n  return savedData;\r\n}\r\n","import { useLayoutEffect, useState, useRef } from \"react\";\r\n\r\nimport { fetchGithubUser } from \"../services\";\r\n\r\nexport default function useGithubUserFetch(name) {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n  const [data, setData] = useState(null);\r\n\r\n  const didMountRef = useRef(false);\r\n\r\n  useLayoutEffect(() => {\r\n    if (didMountRef.current) {\r\n      setError(\"\");\r\n      setData(null);\r\n      setLoading(true);\r\n      (async function () {\r\n        try {\r\n          const resp = await fetchGithubUser(name);\r\n          const data = await resp.json();\r\n\r\n          if (resp.ok) {\r\n            setData(data);\r\n          } else {\r\n            setError(data.message);\r\n          }\r\n        } catch (err) {\r\n          setError(\"Unexpected error, try again!\");\r\n        } finally {\r\n          setLoading(false);\r\n        }\r\n      })();\r\n    } else {\r\n      didMountRef.current = true;\r\n    }\r\n  }, [name]);\r\n\r\n  return [data, error, loading, didMountRef.current];\r\n}\r\n","import React from \"react\";\n\nimport { Homepage } from \"./pages/\";\n\nfunction App() {\n  return <Homepage />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}